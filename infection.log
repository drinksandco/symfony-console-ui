Escaped mutants:
================

1) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Controller/AppController.php:119    [M] Foreach_

--- Original
+++ New
@@ @@
         $namespaces = [];
         $commands = $application->all();
         $rawNamespaces = array_keys($commands);
-        foreach ($rawNamespaces as $rawNamespace) {
+        foreach (array() as $rawNamespace) {
             Assert::string($rawNamespace);
             $command = $commands[$rawNamespace];
             if (in_array($rawNamespace, $command->getAliases())) {


2) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Controller/AppController.php:132    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
             }
         }
         $namespaces = array_keys($namespaces);
-        sort($namespaces);
+        
         return array_merge(['root'], $namespaces);
     }
     /** @return array<Command> */


3) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Controller/AppController.php:134    [M] UnwrapArrayMerge

--- Original
+++ New
@@ @@
         }
         $namespaces = array_keys($namespaces);
         sort($namespaces);
-        return array_merge(['root'], $namespaces);
+        return ['root'];
     }
     /** @return array<Command> */
     private function getNoNamespacedCommands(Application $application) : array


4) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/DependencyInjection/ConsoleUiCompilerPass.php:28    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $consoleUiConfig = $container->getExtensionConfig('console_ui');
         $mergedConfig = array_merge(...$consoleUiConfig);
-        Assert::keyExists($mergedConfig, 'command_provider');
+        
         $container->addCompilerPass(new AddEventAliasesPass([CommandScheduled::class => CommandScheduled::class, ScheduledCommandReceived::class => ScheduledCommandReceived::class, CommandStarted::class => CommandStarted::class, CommandOutputReceived::class => CommandOutputReceived::class, CommandSucceeded::class => CommandSucceeded::class, CommandFailed::class => CommandFailed::class]));
         $provider = $mergedConfig['command_provider'] ?? [];
         Assert::string($provider);


5) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/DependencyInjection/ConsoleUiCompilerPass.php:30    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $consoleUiConfig = $container->getExtensionConfig('console_ui');
         $mergedConfig = array_merge(...$consoleUiConfig);
         Assert::keyExists($mergedConfig, 'command_provider');
-        $container->addCompilerPass(new AddEventAliasesPass([CommandScheduled::class => CommandScheduled::class, ScheduledCommandReceived::class => ScheduledCommandReceived::class, CommandStarted::class => CommandStarted::class, CommandOutputReceived::class => CommandOutputReceived::class, CommandSucceeded::class => CommandSucceeded::class, CommandFailed::class => CommandFailed::class]));
+        $container->addCompilerPass(new AddEventAliasesPass([ScheduledCommandReceived::class => ScheduledCommandReceived::class, CommandStarted::class => CommandStarted::class, CommandOutputReceived::class => CommandOutputReceived::class, CommandSucceeded::class => CommandSucceeded::class, CommandFailed::class => CommandFailed::class]));
         $provider = $mergedConfig['command_provider'] ?? [];
         Assert::string($provider);
         if ($provider === 'enqueue_php') {


6) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/DependencyInjection/ConsoleUiCompilerPass.php:30    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $consoleUiConfig = $container->getExtensionConfig('console_ui');
         $mergedConfig = array_merge(...$consoleUiConfig);
         Assert::keyExists($mergedConfig, 'command_provider');
-        $container->addCompilerPass(new AddEventAliasesPass([CommandScheduled::class => CommandScheduled::class, ScheduledCommandReceived::class => ScheduledCommandReceived::class, CommandStarted::class => CommandStarted::class, CommandOutputReceived::class => CommandOutputReceived::class, CommandSucceeded::class => CommandSucceeded::class, CommandFailed::class => CommandFailed::class]));
+        
         $provider = $mergedConfig['command_provider'] ?? [];
         Assert::string($provider);
         if ($provider === 'enqueue_php') {


7) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/DependencyInjection/ConsoleUiCompilerPass.php:43    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $provider = $mergedConfig['command_provider'] ?? [];
         Assert::string($provider);
         if ($provider === 'enqueue_php') {
-            Assert::keyExists($mergedConfig, 'provider_options');
+            
             Assert::isArray($mergedConfig['provider_options']);
             Assert::keyExists($mergedConfig['provider_options'], 'enqueue_php');
             Assert::isArray($mergedConfig['provider_options']['enqueue_php']);


8) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/DependencyInjection/ConsoleUiCompilerPass.php:45    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($provider === 'enqueue_php') {
             Assert::keyExists($mergedConfig, 'provider_options');
             Assert::isArray($mergedConfig['provider_options']);
-            Assert::keyExists($mergedConfig['provider_options'], 'enqueue_php');
+            
             Assert::isArray($mergedConfig['provider_options']['enqueue_php']);
             $providerOptions = $mergedConfig['provider_options']['enqueue_php'];
             Assert::keyExists($providerOptions, 'queue_name');


9) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/DependencyInjection/ConsoleUiCompilerPass.php:48    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             Assert::keyExists($mergedConfig['provider_options'], 'enqueue_php');
             Assert::isArray($mergedConfig['provider_options']['enqueue_php']);
             $providerOptions = $mergedConfig['provider_options']['enqueue_php'];
-            Assert::keyExists($providerOptions, 'queue_name');
+            
             Assert::string($providerOptions['queue_name']);
             $queueName = $providerOptions['queue_name'];
             $commandSchedulerDefinition = $container->register(CommandScheduler::class, EnqueueCommandScheduler::class)->addArgument(new Reference(sprintf('enqueue.client.%s.lazy_producer', $queueName)));


10) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/DependencyInjection/ConsoleUiExtension.php:31    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     /** @param array<mixed> $mergedConfig */
     public function loadInternal(array $mergedConfig, ContainerBuilder $container) : void
     {
-        $this->configureStartConsoleCommand($container);
+        
         $this->configureControllers($container);
         $this->configureCommandProcessor($container);
         $this->configureCommandHandler($container);


11) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/DependencyInjection/ConsoleUiExtension.php:33    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $this->configureStartConsoleCommand($container);
         $this->configureControllers($container);
-        $this->configureCommandProcessor($container);
+        
         $this->configureCommandHandler($container);
         $this->configureCommandWatcher($container);
     }


12) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/DependencyInjection/ConsoleUiExtension.php:35    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $this->configureControllers($container);
         $this->configureCommandProcessor($container);
         $this->configureCommandHandler($container);
-        $this->configureCommandWatcher($container);
+        
     }
     private function configureControllers(ContainerBuilder $containerBuilder) : void
     {


13) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/DependencyInjection/ConsoleUiExtension.php:43    [M] TrueValue

--- Original
+++ New
@@ @@
     }
     private function configureControllers(ContainerBuilder $containerBuilder) : void
     {
-        $containerBuilder->register(AppController::class, AppController::class)->addArgument(new Reference('kernel'))->addArgument(new Reference('twig'))->setAutoconfigured(true)->addTag('controller.service_arguments');
+        $containerBuilder->register(AppController::class, AppController::class)->addArgument(new Reference('kernel'))->addArgument(new Reference('twig'))->setAutoconfigured(false)->addTag('controller.service_arguments');
         $containerBuilder->register(CommandScheduleController::class, CommandScheduleController::class)->addArgument(new Reference(QueueCommandHandler::class))->setAutoconfigured(true)->addTag('controller.service_arguments');
     }
     private function configureCommandProcessor(ContainerBuilder $containerBuilder) : void


14) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/DependencyInjection/ConsoleUiExtension.php:47    [M] TrueValue

--- Original
+++ New
@@ @@
     private function configureControllers(ContainerBuilder $containerBuilder) : void
     {
         $containerBuilder->register(AppController::class, AppController::class)->addArgument(new Reference('kernel'))->addArgument(new Reference('twig'))->setAutoconfigured(true)->addTag('controller.service_arguments');
-        $containerBuilder->register(CommandScheduleController::class, CommandScheduleController::class)->addArgument(new Reference(QueueCommandHandler::class))->setAutoconfigured(true)->addTag('controller.service_arguments');
+        $containerBuilder->register(CommandScheduleController::class, CommandScheduleController::class)->addArgument(new Reference(QueueCommandHandler::class))->setAutoconfigured(false)->addTag('controller.service_arguments');
     }
     private function configureCommandProcessor(ContainerBuilder $containerBuilder) : void
     {


15) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/DependencyInjection/ConsoleUiExtension.php:56    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $configuration = $this->getConfiguration([], $containerBuilder);
         Assert::notNull($configuration);
         $config = $this->processConfiguration($configuration, []);
-        $containerBuilder->register(ProcessFactory::class, SymfonyProcessFactory::class);
+        
         $provider = $config['command_provider'] ?? [];
         Assert::string($provider);
         if ('enqueue_php' === $provider) {


16) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/DependencyInjection/ConsoleUiExtension.php:60    [M] Identical

--- Original
+++ New
@@ @@
         $containerBuilder->register(ProcessFactory::class, SymfonyProcessFactory::class);
         $provider = $config['command_provider'] ?? [];
         Assert::string($provider);
-        if ('enqueue_php' === $provider) {
+        if ('enqueue_php' !== $provider) {
             Assert::keyExists($config, 'provider_options');
             Assert::isArray($config['provider_options']);
             Assert::keyExists($config['provider_options'], 'enqueue_php');


17) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/DependencyInjection/ConsoleUiExtension.php:61    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $provider = $config['command_provider'] ?? [];
         Assert::string($provider);
         if ('enqueue_php' === $provider) {
-            Assert::keyExists($config, 'provider_options');
+            
             Assert::isArray($config['provider_options']);
             Assert::keyExists($config['provider_options'], 'enqueue_php');
             Assert::isArray($config['provider_options']['enqueue_php']);


18) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/DependencyInjection/ConsoleUiExtension.php:63    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ('enqueue_php' === $provider) {
             Assert::keyExists($config, 'provider_options');
             Assert::isArray($config['provider_options']);
-            Assert::keyExists($config['provider_options'], 'enqueue_php');
+            
             Assert::isArray($config['provider_options']['enqueue_php']);
             $providerOptions = $config['provider_options']['enqueue_php'];
             Assert::keyExists($providerOptions, 'queue_name');


19) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/DependencyInjection/ConsoleUiExtension.php:66    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             Assert::keyExists($config['provider_options'], 'enqueue_php');
             Assert::isArray($config['provider_options']['enqueue_php']);
             $providerOptions = $config['provider_options']['enqueue_php'];
-            Assert::keyExists($providerOptions, 'queue_name');
+            
             Assert::string($providerOptions['queue_name']);
             $queueName = $providerOptions['queue_name'];
             $containerBuilder->register(RunCommandProcessor::class, RunCommandProcessor::class)->addArgument(new Reference('event_dispatcher'))->addArgument(new Reference(ProcessFactory::class))->addArgument('%kernel.project_dir%')->setAutoconfigured(true)->addTag('enqueue.command_subscriber', ['name' => 'enqueue.command_subscriber', 'topicName' => 'run_command', 'client' => $queueName]);


20) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/DependencyInjection/ConsoleUiExtension.php:69    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             Assert::keyExists($providerOptions, 'queue_name');
             Assert::string($providerOptions['queue_name']);
             $queueName = $providerOptions['queue_name'];
-            $containerBuilder->register(RunCommandProcessor::class, RunCommandProcessor::class)->addArgument(new Reference('event_dispatcher'))->addArgument(new Reference(ProcessFactory::class))->addArgument('%kernel.project_dir%')->setAutoconfigured(true)->addTag('enqueue.command_subscriber', ['name' => 'enqueue.command_subscriber', 'topicName' => 'run_command', 'client' => $queueName]);
+            
         }
     }
     private function configureCommandHandler(ContainerBuilder $containerBuilder) : void


21) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/DependencyInjection/ConsoleUiExtension.php:73    [M] TrueValue

--- Original
+++ New
@@ @@
             Assert::keyExists($providerOptions, 'queue_name');
             Assert::string($providerOptions['queue_name']);
             $queueName = $providerOptions['queue_name'];
-            $containerBuilder->register(RunCommandProcessor::class, RunCommandProcessor::class)->addArgument(new Reference('event_dispatcher'))->addArgument(new Reference(ProcessFactory::class))->addArgument('%kernel.project_dir%')->setAutoconfigured(true)->addTag('enqueue.command_subscriber', ['name' => 'enqueue.command_subscriber', 'topicName' => 'run_command', 'client' => $queueName]);
+            $containerBuilder->register(RunCommandProcessor::class, RunCommandProcessor::class)->addArgument(new Reference('event_dispatcher'))->addArgument(new Reference(ProcessFactory::class))->addArgument('%kernel.project_dir%')->setAutoconfigured(false)->addTag('enqueue.command_subscriber', ['name' => 'enqueue.command_subscriber', 'topicName' => 'run_command', 'client' => $queueName]);
         }
     }
     private function configureCommandHandler(ContainerBuilder $containerBuilder) : void


22) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/DependencyInjection/ConsoleUiExtension.php:76    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             Assert::keyExists($providerOptions, 'queue_name');
             Assert::string($providerOptions['queue_name']);
             $queueName = $providerOptions['queue_name'];
-            $containerBuilder->register(RunCommandProcessor::class, RunCommandProcessor::class)->addArgument(new Reference('event_dispatcher'))->addArgument(new Reference(ProcessFactory::class))->addArgument('%kernel.project_dir%')->setAutoconfigured(true)->addTag('enqueue.command_subscriber', ['name' => 'enqueue.command_subscriber', 'topicName' => 'run_command', 'client' => $queueName]);
+            $containerBuilder->register(RunCommandProcessor::class, RunCommandProcessor::class)->addArgument(new Reference('event_dispatcher'))->addArgument(new Reference(ProcessFactory::class))->addArgument('%kernel.project_dir%')->setAutoconfigured(true)->addTag('enqueue.command_subscriber', ['topicName' => 'run_command', 'client' => $queueName]);
         }
     }
     private function configureCommandHandler(ContainerBuilder $containerBuilder) : void


23) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/DependencyInjection/ConsoleUiExtension.php:90    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     private function configureCommandWatcher(ContainerBuilder $containerBuilder) : void
     {
-        $containerBuilder->register(CommandWatcher::class, MercureCommandWatcher::class)->addArgument(new Reference('mercure.hub.default'))->addTag('kernel.event_listener', ['event' => CommandStarted::class, 'method' => 'handleCommandStarted'])->addTag('kernel.event_listener', ['event' => ScheduledCommandReceived::class, 'method' => 'handleScheduledCommandReceived'])->addTag('kernel.event_listener', ['event' => CommandOutputReceived::class, 'method' => 'handleCommandOutputReceived'])->addTag('kernel.event_listener', ['event' => CommandSucceeded::class, 'method' => 'handleCommandSucceeded'])->addTag('kernel.event_listener', ['event' => CommandFailed::class, 'method' => 'handleCommandFailed']);
+        
     }
     private function configureStartConsoleCommand(ContainerBuilder $containerBuilder) : void
     {


24) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/DependencyInjection/ConsoleUiExtension.php:92    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     private function configureCommandWatcher(ContainerBuilder $containerBuilder) : void
     {
-        $containerBuilder->register(CommandWatcher::class, MercureCommandWatcher::class)->addArgument(new Reference('mercure.hub.default'))->addTag('kernel.event_listener', ['event' => CommandStarted::class, 'method' => 'handleCommandStarted'])->addTag('kernel.event_listener', ['event' => ScheduledCommandReceived::class, 'method' => 'handleScheduledCommandReceived'])->addTag('kernel.event_listener', ['event' => CommandOutputReceived::class, 'method' => 'handleCommandOutputReceived'])->addTag('kernel.event_listener', ['event' => CommandSucceeded::class, 'method' => 'handleCommandSucceeded'])->addTag('kernel.event_listener', ['event' => CommandFailed::class, 'method' => 'handleCommandFailed']);
+        $containerBuilder->register(CommandWatcher::class, MercureCommandWatcher::class)->addArgument(new Reference('mercure.hub.default'))->addTag('kernel.event_listener', ['method' => 'handleCommandStarted'])->addTag('kernel.event_listener', ['event' => ScheduledCommandReceived::class, 'method' => 'handleScheduledCommandReceived'])->addTag('kernel.event_listener', ['event' => CommandOutputReceived::class, 'method' => 'handleCommandOutputReceived'])->addTag('kernel.event_listener', ['event' => CommandSucceeded::class, 'method' => 'handleCommandSucceeded'])->addTag('kernel.event_listener', ['event' => CommandFailed::class, 'method' => 'handleCommandFailed']);
     }
     private function configureStartConsoleCommand(ContainerBuilder $containerBuilder) : void
     {


25) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/DependencyInjection/ConsoleUiExtension.php:96    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     private function configureCommandWatcher(ContainerBuilder $containerBuilder) : void
     {
-        $containerBuilder->register(CommandWatcher::class, MercureCommandWatcher::class)->addArgument(new Reference('mercure.hub.default'))->addTag('kernel.event_listener', ['event' => CommandStarted::class, 'method' => 'handleCommandStarted'])->addTag('kernel.event_listener', ['event' => ScheduledCommandReceived::class, 'method' => 'handleScheduledCommandReceived'])->addTag('kernel.event_listener', ['event' => CommandOutputReceived::class, 'method' => 'handleCommandOutputReceived'])->addTag('kernel.event_listener', ['event' => CommandSucceeded::class, 'method' => 'handleCommandSucceeded'])->addTag('kernel.event_listener', ['event' => CommandFailed::class, 'method' => 'handleCommandFailed']);
+        $containerBuilder->register(CommandWatcher::class, MercureCommandWatcher::class)->addArgument(new Reference('mercure.hub.default'))->addTag('kernel.event_listener', ['event' => CommandStarted::class, 'method' => 'handleCommandStarted'])->addTag('kernel.event_listener', ['method' => 'handleScheduledCommandReceived'])->addTag('kernel.event_listener', ['event' => CommandOutputReceived::class, 'method' => 'handleCommandOutputReceived'])->addTag('kernel.event_listener', ['event' => CommandSucceeded::class, 'method' => 'handleCommandSucceeded'])->addTag('kernel.event_listener', ['event' => CommandFailed::class, 'method' => 'handleCommandFailed']);
     }
     private function configureStartConsoleCommand(ContainerBuilder $containerBuilder) : void
     {


26) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/DependencyInjection/ConsoleUiExtension.php:100    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     private function configureCommandWatcher(ContainerBuilder $containerBuilder) : void
     {
-        $containerBuilder->register(CommandWatcher::class, MercureCommandWatcher::class)->addArgument(new Reference('mercure.hub.default'))->addTag('kernel.event_listener', ['event' => CommandStarted::class, 'method' => 'handleCommandStarted'])->addTag('kernel.event_listener', ['event' => ScheduledCommandReceived::class, 'method' => 'handleScheduledCommandReceived'])->addTag('kernel.event_listener', ['event' => CommandOutputReceived::class, 'method' => 'handleCommandOutputReceived'])->addTag('kernel.event_listener', ['event' => CommandSucceeded::class, 'method' => 'handleCommandSucceeded'])->addTag('kernel.event_listener', ['event' => CommandFailed::class, 'method' => 'handleCommandFailed']);
+        $containerBuilder->register(CommandWatcher::class, MercureCommandWatcher::class)->addArgument(new Reference('mercure.hub.default'))->addTag('kernel.event_listener', ['event' => CommandStarted::class, 'method' => 'handleCommandStarted'])->addTag('kernel.event_listener', ['event' => ScheduledCommandReceived::class, 'method' => 'handleScheduledCommandReceived'])->addTag('kernel.event_listener', ['method' => 'handleCommandOutputReceived'])->addTag('kernel.event_listener', ['event' => CommandSucceeded::class, 'method' => 'handleCommandSucceeded'])->addTag('kernel.event_listener', ['event' => CommandFailed::class, 'method' => 'handleCommandFailed']);
     }
     private function configureStartConsoleCommand(ContainerBuilder $containerBuilder) : void
     {


27) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/DependencyInjection/ConsoleUiExtension.php:104    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     private function configureCommandWatcher(ContainerBuilder $containerBuilder) : void
     {
-        $containerBuilder->register(CommandWatcher::class, MercureCommandWatcher::class)->addArgument(new Reference('mercure.hub.default'))->addTag('kernel.event_listener', ['event' => CommandStarted::class, 'method' => 'handleCommandStarted'])->addTag('kernel.event_listener', ['event' => ScheduledCommandReceived::class, 'method' => 'handleScheduledCommandReceived'])->addTag('kernel.event_listener', ['event' => CommandOutputReceived::class, 'method' => 'handleCommandOutputReceived'])->addTag('kernel.event_listener', ['event' => CommandSucceeded::class, 'method' => 'handleCommandSucceeded'])->addTag('kernel.event_listener', ['event' => CommandFailed::class, 'method' => 'handleCommandFailed']);
+        $containerBuilder->register(CommandWatcher::class, MercureCommandWatcher::class)->addArgument(new Reference('mercure.hub.default'))->addTag('kernel.event_listener', ['event' => CommandStarted::class, 'method' => 'handleCommandStarted'])->addTag('kernel.event_listener', ['event' => ScheduledCommandReceived::class, 'method' => 'handleScheduledCommandReceived'])->addTag('kernel.event_listener', ['event' => CommandOutputReceived::class, 'method' => 'handleCommandOutputReceived'])->addTag('kernel.event_listener', ['method' => 'handleCommandSucceeded'])->addTag('kernel.event_listener', ['event' => CommandFailed::class, 'method' => 'handleCommandFailed']);
     }
     private function configureStartConsoleCommand(ContainerBuilder $containerBuilder) : void
     {


28) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/DependencyInjection/ConsoleUiExtension.php:108    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     private function configureCommandWatcher(ContainerBuilder $containerBuilder) : void
     {
-        $containerBuilder->register(CommandWatcher::class, MercureCommandWatcher::class)->addArgument(new Reference('mercure.hub.default'))->addTag('kernel.event_listener', ['event' => CommandStarted::class, 'method' => 'handleCommandStarted'])->addTag('kernel.event_listener', ['event' => ScheduledCommandReceived::class, 'method' => 'handleScheduledCommandReceived'])->addTag('kernel.event_listener', ['event' => CommandOutputReceived::class, 'method' => 'handleCommandOutputReceived'])->addTag('kernel.event_listener', ['event' => CommandSucceeded::class, 'method' => 'handleCommandSucceeded'])->addTag('kernel.event_listener', ['event' => CommandFailed::class, 'method' => 'handleCommandFailed']);
+        $containerBuilder->register(CommandWatcher::class, MercureCommandWatcher::class)->addArgument(new Reference('mercure.hub.default'))->addTag('kernel.event_listener', ['event' => CommandStarted::class, 'method' => 'handleCommandStarted'])->addTag('kernel.event_listener', ['event' => ScheduledCommandReceived::class, 'method' => 'handleScheduledCommandReceived'])->addTag('kernel.event_listener', ['event' => CommandOutputReceived::class, 'method' => 'handleCommandOutputReceived'])->addTag('kernel.event_listener', ['event' => CommandSucceeded::class, 'method' => 'handleCommandSucceeded'])->addTag('kernel.event_listener', ['method' => 'handleCommandFailed']);
     }
     private function configureStartConsoleCommand(ContainerBuilder $containerBuilder) : void
     {


29) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/DependencyInjection/ConsoleUiExtension.php:116    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     private function configureStartConsoleCommand(ContainerBuilder $containerBuilder) : void
     {
-        $containerBuilder->register(StartConsoleUiCommand::class, StartConsoleUiCommand::class)->addArgument('%kernel.project_dir%')->addTag('console.command');
+        
     }
 }


30) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Queue/ExecuteCommand.php:26    [M] IncrementInteger

--- Original
+++ New
@@ @@
     public static function execute(ProcessFactory $processFactory, EventDispatcherInterface $eventDispatcher, string $commandLine, string $projectDir) : void
     {
         $command = explode(' ', $commandLine);
-        $eventDispatcher->dispatch(new ScheduledCommandReceived('STOPPED', $command[0], $commandLine));
+        $eventDispatcher->dispatch(new ScheduledCommandReceived('STOPPED', $command[1], $commandLine));
         $process = $processFactory->create($command, $projectDir);
         try {
             $process->start();


31) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Queue/ExecuteCommand.php:34    [M] Identical

--- Original
+++ New
@@ @@
             $eventDispatcher->dispatch(new CommandStarted('RUNNING', '', $process->getPid()));
             while ($process->isRunning()) {
                 $incrementalOutput = $process->getIncrementalOutput();
-                if ('' === $incrementalOutput) {
+                if ('' !== $incrementalOutput) {
                     continue;
                 }
                 $eventDispatcher->dispatch(new CommandOutputReceived('RUNNING', $command[0], $incrementalOutput, $process->getPid()));


32) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Queue/ExecuteCommand.php:40    [M] IncrementInteger

--- Original
+++ New
@@ @@
                 if ('' === $incrementalOutput) {
                     continue;
                 }
-                $eventDispatcher->dispatch(new CommandOutputReceived('RUNNING', $command[0], $incrementalOutput, $process->getPid()));
+                $eventDispatcher->dispatch(new CommandOutputReceived('RUNNING', $command[1], $incrementalOutput, $process->getPid()));
             }
             if (!$process->isSuccessful()) {
                 throw new ProcessFailedException($process);


33) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Queue/ExecuteCommand.php:52    [M] IncrementInteger

--- Original
+++ New
@@ @@
             if (!$process->isSuccessful()) {
                 throw new ProcessFailedException($process);
             }
-            $eventDispatcher->dispatch(new CommandOutputReceived('RUNNING', $command[0], $process->getIncrementalOutput(), $process->getPid()));
+            $eventDispatcher->dispatch(new CommandOutputReceived('RUNNING', $command[1], $process->getIncrementalOutput(), $process->getPid()));
             $eventDispatcher->dispatch(new CommandSucceeded('SUCCEEDED', $command[0], $process->getStatus(), $process->getPid()));
         } catch (ProcessFailedException $exception) {
             $eventDispatcher->dispatch(new CommandFailed('FAILED', $command[0], $process->getErrorOutput(), $process->getStatus(), $process->getPid()));


34) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Queue/ExecuteCommand.php:59    [M] IncrementInteger

--- Original
+++ New
@@ @@
                 throw new ProcessFailedException($process);
             }
             $eventDispatcher->dispatch(new CommandOutputReceived('RUNNING', $command[0], $process->getIncrementalOutput(), $process->getPid()));
-            $eventDispatcher->dispatch(new CommandSucceeded('SUCCEEDED', $command[0], $process->getStatus(), $process->getPid()));
+            $eventDispatcher->dispatch(new CommandSucceeded('SUCCEEDED', $command[1], $process->getStatus(), $process->getPid()));
         } catch (ProcessFailedException $exception) {
             $eventDispatcher->dispatch(new CommandFailed('FAILED', $command[0], $process->getErrorOutput(), $process->getStatus(), $process->getPid()));
             throw $exception;


35) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Queue/ExecuteCommand.php:66    [M] IncrementInteger

--- Original
+++ New
@@ @@
             $eventDispatcher->dispatch(new CommandOutputReceived('RUNNING', $command[0], $process->getIncrementalOutput(), $process->getPid()));
             $eventDispatcher->dispatch(new CommandSucceeded('SUCCEEDED', $command[0], $process->getStatus(), $process->getPid()));
         } catch (ProcessFailedException $exception) {
-            $eventDispatcher->dispatch(new CommandFailed('FAILED', $command[0], $process->getErrorOutput(), $process->getStatus(), $process->getPid()));
+            $eventDispatcher->dispatch(new CommandFailed('FAILED', $command[1], $process->getErrorOutput(), $process->getStatus(), $process->getPid()));
             throw $exception;
         }
     }
 }


36) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Queue/ExecuteCommand.php:72    [M] Throw_

--- Original
+++ New
@@ @@
             $eventDispatcher->dispatch(new CommandSucceeded('SUCCEEDED', $command[0], $process->getStatus(), $process->getPid()));
         } catch (ProcessFailedException $exception) {
             $eventDispatcher->dispatch(new CommandFailed('FAILED', $command[0], $process->getErrorOutput(), $process->getStatus(), $process->getPid()));
-            throw $exception;
+            $exception;
         }
     }
 }


Timed Out mutants:
==================

Skipped mutants:
================

Not Covered mutants:
====================

1) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:23    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     private array $activeProcesses = [];
     public function __construct(private readonly string $projectDir)
     {
-        parent::__construct();
+        
     }
     protected function configure() : void
     {


2) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:28    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     protected function configure() : void
     {
-        $this->setName('_ui')->setDescription('Start Console UI Application')->addArgument('console_environment', InputArgument::OPTIONAL, 'Select between "local" or "docker" environments', 'local');
+        
     }
     protected function execute(InputInterface $input, OutputInterface $output) : int
     {


3) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:42    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     protected function execute(InputInterface $input, OutputInterface $output) : int
     {
         $environment = $input->getArgument('console_environment');
-        /** @psalm-suppress RedundantCondition */
-        Assert::string($environment);
+        
         if ('local' === $environment) {
             try {
                 $this->runMercureLocal();


4) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:44    [M] Identical

--- Original
+++ New
@@ @@
         $environment = $input->getArgument('console_environment');
         /** @psalm-suppress RedundantCondition */
         Assert::string($environment);
-        if ('local' === $environment) {
+        if ('local' !== $environment) {
             try {
                 $this->runMercureLocal();
                 $this->runQueue();


5) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:46    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         Assert::string($environment);
         if ('local' === $environment) {
             try {
-                $this->runMercureLocal();
+                
                 $this->runQueue();
                 $this->runWebServer();
                 $this->runElectronApp();


6) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:47    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ('local' === $environment) {
             try {
                 $this->runMercureLocal();
-                $this->runQueue();
+                
                 $this->runWebServer();
                 $this->runElectronApp();
                 while (count($this->activeProcesses)) {


7) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:48    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             try {
                 $this->runMercureLocal();
                 $this->runQueue();
-                $this->runWebServer();
+                
                 $this->runElectronApp();
                 while (count($this->activeProcesses)) {
                     foreach ($this->activeProcesses as $index => $runningProcess) {


8) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:49    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $this->runMercureLocal();
                 $this->runQueue();
                 $this->runWebServer();
-                $this->runElectronApp();
+                
                 while (count($this->activeProcesses)) {
                     foreach ($this->activeProcesses as $index => $runningProcess) {
                         // specific process is finished, so we remove it


9) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:51    [M] While_

--- Original
+++ New
@@ @@
                 $this->runQueue();
                 $this->runWebServer();
                 $this->runElectronApp();
-                while (count($this->activeProcesses)) {
+                while (false) {
                     foreach ($this->activeProcesses as $index => $runningProcess) {
                         // specific process is finished, so we remove it
                         if (!$runningProcess->isRunning()) {


10) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:52    [M] Foreach_

--- Original
+++ New
@@ @@
                 $this->runWebServer();
                 $this->runElectronApp();
                 while (count($this->activeProcesses)) {
-                    foreach ($this->activeProcesses as $index => $runningProcess) {
+                    foreach (array() as $index => $runningProcess) {
                         // specific process is finished, so we remove it
                         if (!$runningProcess->isRunning()) {
                             unset($this->activeProcesses[$index]);


11) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:54    [M] LogicalNot

--- Original
+++ New
@@ @@
                 while (count($this->activeProcesses)) {
                     foreach ($this->activeProcesses as $index => $runningProcess) {
                         // specific process is finished, so we remove it
-                        if (!$runningProcess->isRunning()) {
+                        if ($runningProcess->isRunning()) {
                             unset($this->activeProcesses[$index]);
                             if (!$runningProcess->isSuccessful()) {
                                 throw new ProcessFailedException($runningProcess);


12) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:56    [M] LogicalNot

--- Original
+++ New
@@ @@
                         // specific process is finished, so we remove it
                         if (!$runningProcess->isRunning()) {
                             unset($this->activeProcesses[$index]);
-                            if (!$runningProcess->isSuccessful()) {
+                            if ($runningProcess->isSuccessful()) {
                                 throw new ProcessFailedException($runningProcess);
                             }
                         }


13) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:57    [M] Throw_

--- Original
+++ New
@@ @@
                         if (!$runningProcess->isRunning()) {
                             unset($this->activeProcesses[$index]);
                             if (!$runningProcess->isSuccessful()) {
-                                throw new ProcessFailedException($runningProcess);
+                                new ProcessFailedException($runningProcess);
                             }
                         }
                         $output->write($runningProcess->getIncrementalOutput());


14) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:61    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                                 throw new ProcessFailedException($runningProcess);
                             }
                         }
-                        $output->write($runningProcess->getIncrementalOutput());
+                        
                         // check every second
                         sleep(1);
                     }


15) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:63    [M] DecrementInteger

--- Original
+++ New
@@ @@
                         }
                         $output->write($runningProcess->getIncrementalOutput());
                         // check every second
-                        sleep(1);
+                        sleep(0);
                     }
                 }
             } catch (ProcessFailedException $exception) {


16) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:63    [M] IncrementInteger

--- Original
+++ New
@@ @@
                         }
                         $output->write($runningProcess->getIncrementalOutput());
                         // check every second
-                        sleep(1);
+                        sleep(2);
                     }
                 }
             } catch (ProcessFailedException $exception) {


17) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:63    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
                             }
                         }
                         $output->write($runningProcess->getIncrementalOutput());
-                        // check every second
-                        sleep(1);
+                        
                     }
                 }
             } catch (ProcessFailedException $exception) {


18) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:68    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 }
             } catch (ProcessFailedException $exception) {
                 $process = $exception->getProcess();
-                Assert::isInstanceOf($process, Process::class);
+                
                 foreach ($this->activeProcesses as $activeProcess) {
                     $activeProcess->signal(SIGKILL);
                 }


19) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:69    [M] Foreach_

--- Original
+++ New
@@ @@
             } catch (ProcessFailedException $exception) {
                 $process = $exception->getProcess();
                 Assert::isInstanceOf($process, Process::class);
-                foreach ($this->activeProcesses as $activeProcess) {
+                foreach (array() as $activeProcess) {
                     $activeProcess->signal(SIGKILL);
                 }
                 $output->writeln(sprintf('<error>%s%s</error>', $process->getIncrementalOutput(), $process->getErrorOutput()));


20) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:70    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $process = $exception->getProcess();
                 Assert::isInstanceOf($process, Process::class);
                 foreach ($this->activeProcesses as $activeProcess) {
-                    $activeProcess->signal(SIGKILL);
+                    
                 }
                 $output->writeln(sprintf('<error>%s%s</error>', $process->getIncrementalOutput(), $process->getErrorOutput()));
             }


21) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:72    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 foreach ($this->activeProcesses as $activeProcess) {
                     $activeProcess->signal(SIGKILL);
                 }
-                $output->writeln(sprintf('<error>%s%s</error>', $process->getIncrementalOutput(), $process->getErrorOutput()));
+                
             }
             return Command::SUCCESS;
         }


22) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:82    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             }
             return Command::SUCCESS;
         }
-        $output->writeln(sprintf('<error>Given console environment "%s" is not implemented</error>', $environment));
+        
         return Command::FAILURE;
     }
     private function runMercureLocal() : void


23) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:92    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     private function runMercureLocal() : void
     {
-        $process = new Process(['./mercure'], $this->projectDir, ['JWT_KEY' => $_SERVER['MERCURE_JWT_SECRET'], 'ADDR' => $_SERVER['MERCURE_HOST'], 'ALLOW_ANONYMOUS' => 1, 'CORS_ALLOWED_ORIGINS' => '*']);
+        $process = new Process([], $this->projectDir, ['JWT_KEY' => $_SERVER['MERCURE_JWT_SECRET'], 'ADDR' => $_SERVER['MERCURE_HOST'], 'ALLOW_ANONYMOUS' => 1, 'CORS_ALLOWED_ORIGINS' => '*']);
         $process->setTimeout(0);
         $process->setPty(true);
         $process->start();


24) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:92    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     private function runMercureLocal() : void
     {
-        $process = new Process(['./mercure'], $this->projectDir, ['JWT_KEY' => $_SERVER['MERCURE_JWT_SECRET'], 'ADDR' => $_SERVER['MERCURE_HOST'], 'ALLOW_ANONYMOUS' => 1, 'CORS_ALLOWED_ORIGINS' => '*']);
+        $process = new Process(['./mercure'], $this->projectDir, ['ADDR' => $_SERVER['MERCURE_HOST'], 'ALLOW_ANONYMOUS' => 1, 'CORS_ALLOWED_ORIGINS' => '*']);
         $process->setTimeout(0);
         $process->setPty(true);
         $process->start();


25) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:95    [M] DecrementInteger

--- Original
+++ New
@@ @@
     }
     private function runMercureLocal() : void
     {
-        $process = new Process(['./mercure'], $this->projectDir, ['JWT_KEY' => $_SERVER['MERCURE_JWT_SECRET'], 'ADDR' => $_SERVER['MERCURE_HOST'], 'ALLOW_ANONYMOUS' => 1, 'CORS_ALLOWED_ORIGINS' => '*']);
+        $process = new Process(['./mercure'], $this->projectDir, ['JWT_KEY' => $_SERVER['MERCURE_JWT_SECRET'], 'ADDR' => $_SERVER['MERCURE_HOST'], 'ALLOW_ANONYMOUS' => 0, 'CORS_ALLOWED_ORIGINS' => '*']);
         $process->setTimeout(0);
         $process->setPty(true);
         $process->start();


26) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:95    [M] IncrementInteger

--- Original
+++ New
@@ @@
     }
     private function runMercureLocal() : void
     {
-        $process = new Process(['./mercure'], $this->projectDir, ['JWT_KEY' => $_SERVER['MERCURE_JWT_SECRET'], 'ADDR' => $_SERVER['MERCURE_HOST'], 'ALLOW_ANONYMOUS' => 1, 'CORS_ALLOWED_ORIGINS' => '*']);
+        $process = new Process(['./mercure'], $this->projectDir, ['JWT_KEY' => $_SERVER['MERCURE_JWT_SECRET'], 'ADDR' => $_SERVER['MERCURE_HOST'], 'ALLOW_ANONYMOUS' => 2, 'CORS_ALLOWED_ORIGINS' => '*']);
         $process->setTimeout(0);
         $process->setPty(true);
         $process->start();


27) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:98    [M] DecrementInteger

--- Original
+++ New
@@ @@
     private function runMercureLocal() : void
     {
         $process = new Process(['./mercure'], $this->projectDir, ['JWT_KEY' => $_SERVER['MERCURE_JWT_SECRET'], 'ADDR' => $_SERVER['MERCURE_HOST'], 'ALLOW_ANONYMOUS' => 1, 'CORS_ALLOWED_ORIGINS' => '*']);
-        $process->setTimeout(0);
+        $process->setTimeout(-1);
         $process->setPty(true);
         $process->start();
         $this->activeProcesses[] = $process;


28) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:98    [M] IncrementInteger

--- Original
+++ New
@@ @@
     private function runMercureLocal() : void
     {
         $process = new Process(['./mercure'], $this->projectDir, ['JWT_KEY' => $_SERVER['MERCURE_JWT_SECRET'], 'ADDR' => $_SERVER['MERCURE_HOST'], 'ALLOW_ANONYMOUS' => 1, 'CORS_ALLOWED_ORIGINS' => '*']);
-        $process->setTimeout(0);
+        $process->setTimeout(1);
         $process->setPty(true);
         $process->start();
         $this->activeProcesses[] = $process;


29) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:98    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     private function runMercureLocal() : void
     {
         $process = new Process(['./mercure'], $this->projectDir, ['JWT_KEY' => $_SERVER['MERCURE_JWT_SECRET'], 'ADDR' => $_SERVER['MERCURE_HOST'], 'ALLOW_ANONYMOUS' => 1, 'CORS_ALLOWED_ORIGINS' => '*']);
-        $process->setTimeout(0);
+        
         $process->setPty(true);
         $process->start();
         $this->activeProcesses[] = $process;


30) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:99    [M] TrueValue

--- Original
+++ New
@@ @@
     {
         $process = new Process(['./mercure'], $this->projectDir, ['JWT_KEY' => $_SERVER['MERCURE_JWT_SECRET'], 'ADDR' => $_SERVER['MERCURE_HOST'], 'ALLOW_ANONYMOUS' => 1, 'CORS_ALLOWED_ORIGINS' => '*']);
         $process->setTimeout(0);
-        $process->setPty(true);
+        $process->setPty(false);
         $process->start();
         $this->activeProcesses[] = $process;
     }


31) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:99    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $process = new Process(['./mercure'], $this->projectDir, ['JWT_KEY' => $_SERVER['MERCURE_JWT_SECRET'], 'ADDR' => $_SERVER['MERCURE_HOST'], 'ALLOW_ANONYMOUS' => 1, 'CORS_ALLOWED_ORIGINS' => '*']);
         $process->setTimeout(0);
-        $process->setPty(true);
+        
         $process->start();
         $this->activeProcesses[] = $process;
     }


32) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:101    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $process = new Process(['./mercure'], $this->projectDir, ['JWT_KEY' => $_SERVER['MERCURE_JWT_SECRET'], 'ADDR' => $_SERVER['MERCURE_HOST'], 'ALLOW_ANONYMOUS' => 1, 'CORS_ALLOWED_ORIGINS' => '*']);
         $process->setTimeout(0);
         $process->setPty(true);
-        $process->start();
+        
         $this->activeProcesses[] = $process;
     }
     private function runQueue() : void


33) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:108    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     private function runQueue() : void
     {
-        $process = new Process(['bin/console', 'enqueue:consume', '--client=console_queue', '-vvv'], $this->projectDir);
+        $process = new Process(['enqueue:consume', '--client=console_queue', '-vvv'], $this->projectDir);
         $process->setTimeout(0);
         $process->setPty(true);
         $process->start();


34) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:109    [M] DecrementInteger

--- Original
+++ New
@@ @@
     private function runQueue() : void
     {
         $process = new Process(['bin/console', 'enqueue:consume', '--client=console_queue', '-vvv'], $this->projectDir);
-        $process->setTimeout(0);
+        $process->setTimeout(-1);
         $process->setPty(true);
         $process->start();
         $this->activeProcesses[] = $process;


35) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:109    [M] IncrementInteger

--- Original
+++ New
@@ @@
     private function runQueue() : void
     {
         $process = new Process(['bin/console', 'enqueue:consume', '--client=console_queue', '-vvv'], $this->projectDir);
-        $process->setTimeout(0);
+        $process->setTimeout(1);
         $process->setPty(true);
         $process->start();
         $this->activeProcesses[] = $process;


36) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:109    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     private function runQueue() : void
     {
         $process = new Process(['bin/console', 'enqueue:consume', '--client=console_queue', '-vvv'], $this->projectDir);
-        $process->setTimeout(0);
+        
         $process->setPty(true);
         $process->start();
         $this->activeProcesses[] = $process;


37) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:110    [M] TrueValue

--- Original
+++ New
@@ @@
     {
         $process = new Process(['bin/console', 'enqueue:consume', '--client=console_queue', '-vvv'], $this->projectDir);
         $process->setTimeout(0);
-        $process->setPty(true);
+        $process->setPty(false);
         $process->start();
         $this->activeProcesses[] = $process;
     }


38) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:110    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $process = new Process(['bin/console', 'enqueue:consume', '--client=console_queue', '-vvv'], $this->projectDir);
         $process->setTimeout(0);
-        $process->setPty(true);
+        
         $process->start();
         $this->activeProcesses[] = $process;
     }


39) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:112    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $process = new Process(['bin/console', 'enqueue:consume', '--client=console_queue', '-vvv'], $this->projectDir);
         $process->setTimeout(0);
         $process->setPty(true);
-        $process->start();
+        
         $this->activeProcesses[] = $process;
     }
     private function runWebServer() : void


40) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:119    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     private function runWebServer() : void
     {
-        $process = new Process(['php', '-S', 'localhost:3000', '-t', 'public'], $this->projectDir);
+        $process = new Process(['-S', 'localhost:3000', '-t', 'public'], $this->projectDir);
         $process->setTimeout(0);
         $process->setPty(true);
         $process->start();


41) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:120    [M] DecrementInteger

--- Original
+++ New
@@ @@
     private function runWebServer() : void
     {
         $process = new Process(['php', '-S', 'localhost:3000', '-t', 'public'], $this->projectDir);
-        $process->setTimeout(0);
+        $process->setTimeout(-1);
         $process->setPty(true);
         $process->start();
         $this->activeProcesses[] = $process;


42) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:120    [M] IncrementInteger

--- Original
+++ New
@@ @@
     private function runWebServer() : void
     {
         $process = new Process(['php', '-S', 'localhost:3000', '-t', 'public'], $this->projectDir);
-        $process->setTimeout(0);
+        $process->setTimeout(1);
         $process->setPty(true);
         $process->start();
         $this->activeProcesses[] = $process;


43) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:120    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     private function runWebServer() : void
     {
         $process = new Process(['php', '-S', 'localhost:3000', '-t', 'public'], $this->projectDir);
-        $process->setTimeout(0);
+        
         $process->setPty(true);
         $process->start();
         $this->activeProcesses[] = $process;


44) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:121    [M] TrueValue

--- Original
+++ New
@@ @@
     {
         $process = new Process(['php', '-S', 'localhost:3000', '-t', 'public'], $this->projectDir);
         $process->setTimeout(0);
-        $process->setPty(true);
+        $process->setPty(false);
         $process->start();
         $this->activeProcesses[] = $process;
     }


45) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:121    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $process = new Process(['php', '-S', 'localhost:3000', '-t', 'public'], $this->projectDir);
         $process->setTimeout(0);
-        $process->setPty(true);
+        
         $process->start();
         $this->activeProcesses[] = $process;
     }


46) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:123    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $process = new Process(['php', '-S', 'localhost:3000', '-t', 'public'], $this->projectDir);
         $process->setTimeout(0);
         $process->setPty(true);
-        $process->start();
+        
         $this->activeProcesses[] = $process;
     }
     private function runElectronApp() : void


47) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:130    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     private function runElectronApp() : void
     {
-        $process = new Process(['npm', 'run', 'console-ui-start'], $this->projectDir);
+        $process = new Process(['run', 'console-ui-start'], $this->projectDir);
         $process->setTimeout(0);
         $process->setPty(true);
         $process->start();


48) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:131    [M] DecrementInteger

--- Original
+++ New
@@ @@
     private function runElectronApp() : void
     {
         $process = new Process(['npm', 'run', 'console-ui-start'], $this->projectDir);
-        $process->setTimeout(0);
+        $process->setTimeout(-1);
         $process->setPty(true);
         $process->start();
         $this->activeProcesses[] = $process;
     }
 }


49) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:131    [M] IncrementInteger

--- Original
+++ New
@@ @@
     private function runElectronApp() : void
     {
         $process = new Process(['npm', 'run', 'console-ui-start'], $this->projectDir);
-        $process->setTimeout(0);
+        $process->setTimeout(1);
         $process->setPty(true);
         $process->start();
         $this->activeProcesses[] = $process;
     }
 }


50) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:131    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     private function runElectronApp() : void
     {
         $process = new Process(['npm', 'run', 'console-ui-start'], $this->projectDir);
-        $process->setTimeout(0);
+        
         $process->setPty(true);
         $process->start();
         $this->activeProcesses[] = $process;
     }
 }


51) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:132    [M] TrueValue

--- Original
+++ New
@@ @@
     {
         $process = new Process(['npm', 'run', 'console-ui-start'], $this->projectDir);
         $process->setTimeout(0);
-        $process->setPty(true);
+        $process->setPty(false);
         $process->start();
         $this->activeProcesses[] = $process;
     }
 }


52) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:132    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $process = new Process(['npm', 'run', 'console-ui-start'], $this->projectDir);
         $process->setTimeout(0);
-        $process->setPty(true);
+        
         $process->start();
         $this->activeProcesses[] = $process;
     }
 }


53) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Command/StartConsoleUiCommand.php:134    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $process = new Process(['npm', 'run', 'console-ui-start'], $this->projectDir);
         $process->setTimeout(0);
         $process->setPty(true);
-        $process->start();
+        
         $this->activeProcesses[] = $process;
     }
 }


54) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/ConsoleUiBundle.php:26    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     private const DEFAULT_CONFIG = ['command_provider' => 'enqueue_php', 'provider_options' => ['enqueue_php' => ['queue_name' => 'console_queue']]];
     public function build(ContainerBuilder $container) : void
     {
-        $container->loadFromExtension('console_ui', self::DEFAULT_CONFIG);
+        
         $container->prependExtensionConfig('enqueue', ['console_queue' => ['transport' => ['dsn' => '%env(CONSOLE_QUEUE_DSN)%'], 'client' => ['app_name' => 'console_ui%kernel.environment%', 'traceable_producer' => true]]]);
         $container->addCompilerPass(new ConsoleUiCompilerPass());
     }
 }


55) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/ConsoleUiBundle.php:28    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function build(ContainerBuilder $container) : void
     {
         $container->loadFromExtension('console_ui', self::DEFAULT_CONFIG);
-        $container->prependExtensionConfig('enqueue', ['console_queue' => ['transport' => ['dsn' => '%env(CONSOLE_QUEUE_DSN)%'], 'client' => ['app_name' => 'console_ui%kernel.environment%', 'traceable_producer' => true]]]);
+        $container->prependExtensionConfig('enqueue', []);
         $container->addCompilerPass(new ConsoleUiCompilerPass());
     }
 }


56) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/ConsoleUiBundle.php:28    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function build(ContainerBuilder $container) : void
     {
         $container->loadFromExtension('console_ui', self::DEFAULT_CONFIG);
-        $container->prependExtensionConfig('enqueue', ['console_queue' => ['transport' => ['dsn' => '%env(CONSOLE_QUEUE_DSN)%'], 'client' => ['app_name' => 'console_ui%kernel.environment%', 'traceable_producer' => true]]]);
+        
         $container->addCompilerPass(new ConsoleUiCompilerPass());
     }
 }


57) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/ConsoleUiBundle.php:29    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function build(ContainerBuilder $container) : void
     {
         $container->loadFromExtension('console_ui', self::DEFAULT_CONFIG);
-        $container->prependExtensionConfig('enqueue', ['console_queue' => ['transport' => ['dsn' => '%env(CONSOLE_QUEUE_DSN)%'], 'client' => ['app_name' => 'console_ui%kernel.environment%', 'traceable_producer' => true]]]);
+        $container->prependExtensionConfig('enqueue', ['console_queue' => ['client' => ['app_name' => 'console_ui%kernel.environment%', 'traceable_producer' => true]]]);
         $container->addCompilerPass(new ConsoleUiCompilerPass());
     }
 }


58) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/ConsoleUiBundle.php:30    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function build(ContainerBuilder $container) : void
     {
         $container->loadFromExtension('console_ui', self::DEFAULT_CONFIG);
-        $container->prependExtensionConfig('enqueue', ['console_queue' => ['transport' => ['dsn' => '%env(CONSOLE_QUEUE_DSN)%'], 'client' => ['app_name' => 'console_ui%kernel.environment%', 'traceable_producer' => true]]]);
+        $container->prependExtensionConfig('enqueue', ['console_queue' => ['transport' => [], 'client' => ['app_name' => 'console_ui%kernel.environment%', 'traceable_producer' => true]]]);
         $container->addCompilerPass(new ConsoleUiCompilerPass());
     }
 }


59) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/ConsoleUiBundle.php:33    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function build(ContainerBuilder $container) : void
     {
         $container->loadFromExtension('console_ui', self::DEFAULT_CONFIG);
-        $container->prependExtensionConfig('enqueue', ['console_queue' => ['transport' => ['dsn' => '%env(CONSOLE_QUEUE_DSN)%'], 'client' => ['app_name' => 'console_ui%kernel.environment%', 'traceable_producer' => true]]]);
+        $container->prependExtensionConfig('enqueue', ['console_queue' => ['transport' => ['dsn' => '%env(CONSOLE_QUEUE_DSN)%'], 'client' => ['traceable_producer' => true]]]);
         $container->addCompilerPass(new ConsoleUiCompilerPass());
     }
 }


60) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/ConsoleUiBundle.php:35    [M] TrueValue

--- Original
+++ New
@@ @@
     public function build(ContainerBuilder $container) : void
     {
         $container->loadFromExtension('console_ui', self::DEFAULT_CONFIG);
-        $container->prependExtensionConfig('enqueue', ['console_queue' => ['transport' => ['dsn' => '%env(CONSOLE_QUEUE_DSN)%'], 'client' => ['app_name' => 'console_ui%kernel.environment%', 'traceable_producer' => true]]]);
+        $container->prependExtensionConfig('enqueue', ['console_queue' => ['transport' => ['dsn' => '%env(CONSOLE_QUEUE_DSN)%'], 'client' => ['app_name' => 'console_ui%kernel.environment%', 'traceable_producer' => false]]]);
         $container->addCompilerPass(new ConsoleUiCompilerPass());
     }
 }


61) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/ConsoleUiBundle.php:40    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $container->loadFromExtension('console_ui', self::DEFAULT_CONFIG);
         $container->prependExtensionConfig('enqueue', ['console_queue' => ['transport' => ['dsn' => '%env(CONSOLE_QUEUE_DSN)%'], 'client' => ['app_name' => 'console_ui%kernel.environment%', 'traceable_producer' => true]]]);
-        $container->addCompilerPass(new ConsoleUiCompilerPass());
+        
     }
 }


62) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Controller/AppController.php:123    [M] Continue_

--- Original
+++ New
@@ @@
             Assert::string($rawNamespace);
             $command = $commands[$rawNamespace];
             if (in_array($rawNamespace, $command->getAliases())) {
-                continue;
+                break;
             }
             if (str_contains($rawNamespace, ':')) {
                 $namespaces[explode(':', $rawNamespace)[0]] = null;


63) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Controller/AppController.php:127    [M] IncrementInteger

--- Original
+++ New
@@ @@
                 continue;
             }
             if (str_contains($rawNamespace, ':')) {
-                $namespaces[explode(':', $rawNamespace)[0]] = null;
+                $namespaces[explode(':', $rawNamespace)[1]] = null;
             }
         }
         $namespaces = array_keys($namespaces);


64) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Controller/AppController.php:142    [M] Foreach_

--- Original
+++ New
@@ @@
     {
         $commands = [];
         $allCommands = $application->all();
-        foreach ($allCommands as $name => $command) {
+        foreach (array() as $name => $command) {
             Assert::string($name);
             if (str_contains($name, ':') || str_starts_with($name, '_')) {
                 continue;


65) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Controller/AppController.php:143    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $commands = [];
         $allCommands = $application->all();
         foreach ($allCommands as $name => $command) {
-            Assert::string($name);
+            
             if (str_contains($name, ':') || str_starts_with($name, '_')) {
                 continue;
             }


66) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Controller/AppController.php:144    [M] LogicalOr

--- Original
+++ New
@@ @@
         $allCommands = $application->all();
         foreach ($allCommands as $name => $command) {
             Assert::string($name);
-            if (str_contains($name, ':') || str_starts_with($name, '_')) {
+            if (str_contains($name, ':') && str_starts_with($name, '_')) {
                 continue;
             }
             $commands[] = $command;


67) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Controller/AppController.php:145    [M] Continue_

--- Original
+++ New
@@ @@
         foreach ($allCommands as $name => $command) {
             Assert::string($name);
             if (str_contains($name, ':') || str_starts_with($name, '_')) {
-                continue;
+                break;
             }
             $commands[] = $command;
         }


68) /home/kpicaza/server/test-symfony-console/app/packages/console-ui-bundle/src/Controller/AppController.php:151    [M] ArrayOneItem

--- Original
+++ New
@@ @@
             }
             $commands[] = $command;
         }
-        return $commands;
+        return count($commands) > 1 ? array_slice($commands, 0, 1, true) : $commands;
     }
 }
